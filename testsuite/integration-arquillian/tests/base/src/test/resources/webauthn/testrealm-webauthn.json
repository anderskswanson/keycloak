{
    "id": "test",
    "realm": "test",
    "enabled": true,
    "sslRequired": "external",
    "registrationAllowed": true,
    "resetPasswordAllowed": true,
    "editUsernameAllowed": true,
    "privateKey": "MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDBGYuO7kuxJgLBj2SuyJ1QwSaaPVTfIq+v03i7YJVa6e5EekdhFS16YE8CZKhf+LQjn4fJcDNWEZuynRlpYaCXlav9wRO31P6YCyL7RiAxJTuDyO/Umy0uRPs1WQ69WDVoxwzOb6mXvpjfME2El6aPxbIZxNiRdlzcXc4cGtbTdvAG+B04HaZyOKl+TtB3c86cSHOw4xz+SeuuR2CdktwA9cTAHEL5RAf2LWwf9R3JsH5tAvHScxBIVL6URAjTrAxzCkg/h6ZYInGzRoaiL5z8OQhm9XJz6dTlGWo4atuZweey79b5YSTjVOjJ0APIfrce/fEkuHuKy4/0iukFeoT5AgMBAAECggEAEAyWe9e0dNHK8tl/LcPAx4B2O+WTE0Snw35ZD4HUiAzfX9Ol8Ry4fe5ZQsKo9+kM19UfjQ+FRMcL4MmL3iVeGps3A00z3ViXnH14d9f5PvxwOODPhiUrmSfklSeEwRn+vmmk19eSCemufQZfuwB7uIFe7yNcOKLUzwAA7HcSmdqopbln3sLVshjCUHOZIzesiigvOGx4w820BBiCE6HcIdO7RDD7ChfjpuRBR2tFGIzTeAlyQ/eRrdZnVryLr006QMGQuTxc5MXlnHqjmIH2Vb7XWmR3zSFe8EraIJeIu4fYtv/uVov/CuIOwdGkx0H4pgnyyypWBTnjgzqGQLhRMQKBgQD3tXN6rTQcRR8/PJJsptVhADAdiTcp9GTBHWYZlg3ZWAJI7IkDuqS+sgXzkwlP2k+HSTS7X9S9dx2or+VSXNLEb5JiGXmpJeSdlGZQ4SW0vwfbw+d/1TauGWE+sLltTKXVN84xysAJgQWrEpqKj0zhIs3TCzlnYz3Vh5yFy+RUPQKBgQDHkCoWkt5tOnjxghSsD17ZztG6L5T1VCFtOBNSlZk7EpwcAB4112rND1UZKL3o66to7ecDe2o4DlssBY5lcj893NghDAN0kM/ho3JG/ty/yYVYAWN5wlEECGd0Qzt/K6qnVPxEA5wxAkmGMWLAekCM/wbcY/uRkRG2PLWLQYyzbQKBgQDh8Q5OPaIkjx/7TEK6/EnxWnyI1FoO2K72PtycRfSH5PDgl3A6iIowrq0jCWEbByQ3YBzLNJQV5YqWDSr9P1G4f5RkCpygHsIyweO5rkP4Y67FVCHaxh5EGz5KMmRQP/ObUnWvkSItCRSkgCmabS9Qw7A96iUIGsuR80pf+CRieQKBgFhMFCM6xoljtsF8wbLDdj8+wBL2HJ1TpRqTFhGTOWImwMWu068U6h9i6k8gdK6LH6Nkp7MltwCocXSP3MpL+2levo4Yp6q6rA/05oo9F+UPwB0JOD9WV8xF/6g0Wy3QX0h8VMWvJzuT/H4QedYaAVehOyLmZhepLUIJqHW+AggdAoGAcSWOD6I7RywCP9fLzPFO5wkaT5TfvyKukDCqt3sykWoIG5nQ1fvIQkF60BKMrnCpYdXIHidR0ulusr82eZF/PuAwjO9wM8UqWmOCWxQJtJPxBH4EQgC3oXZgorFcydtZ7XPqkBPJFa0bzLsPgRXeLVic2LwFFsqwTL6KuU+G7oM=",
    "publicKey": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwRmLju5LsSYCwY9krsidUMEmmj1U3yKvr9N4u2CVWunuRHpHYRUtemBPAmSoX/i0I5+HyXAzVhGbsp0ZaWGgl5Wr/cETt9T+mAsi+0YgMSU7g8jv1JstLkT7NVkOvVg1aMcMzm+pl76Y3zBNhJemj8WyGcTYkXZc3F3OHBrW03bwBvgdOB2mcjipfk7Qd3POnEhzsOMc/knrrkdgnZLcAPXEwBxC+UQH9i1sH/UdybB+bQLx0nMQSFS+lEQI06wMcwpIP4emWCJxs0aGoi+c/DkIZvVyc+nU5RlqOGrbmcHnsu/W+WEk41ToydADyH63Hv3xJLh7isuP9IrpBXqE+QIDAQAB",
    "requiredCredentials": [
        "password"
    ],
    "defaultRoles": [
        "user"
    ],
    "webAuthnPolicySignatureAlgorithms": [
        "ES256",
        "RS256",
        "RS1"
    ],
    "webAuthnPolicyAttestationConveyancePreference": "not specified",
    "webAuthnPolicyAuthenticatorAttachment": "not specified",
    "webAuthnPolicyRequireResidentKey": "not specified",
    "webAuthnPolicyUserVerificationRequirement": "not specified",
    "webAuthnPolicyRpEntityName": "keycloak-webauthn-2FA",
    "webAuthnPolicyCreateTimeout": 60,
    "webAuthnPolicyAvoidSameAuthenticatorRegister": true,
    "webAuthnPolicyAcceptableAaguids": [
        "00000000-0000-0000-0000-000000000000",
        "6d44ba9b-f6ec-2e49-b930-0c8fe920cb73"
    ],
    "smtpServer": {
        "from": "auto@keycloak.org",
        "host": "localhost",
        "port": "3025",
        "fromDisplayName": "Keycloak SSO",
        "replyTo": "reply-to@keycloak.org",
        "replyToDisplayName": "Keycloak no-reply",
        "envelopeFrom": "auto+bounces@keycloak.org"
    },
    "users": [
        {
            "username": "test-user@localhost",
            "enabled": true,
            "email": "test-user@localhost",
            "firstName": "Tom",
            "lastName": "Brady",
            "credentials": [
                {
                    "type": "password",
                    "value": "password"
                }
            ],
            "realmRoles": [
                "user",
                "offline_access"
            ],
            "clientRoles": {
                "test-app": [
                    "customer-user"
                ],
                "account": [
                    "view-profile",
                    "manage-account"
                ]
            }
        },
        {
            "username": "john-doh@localhost",
            "enabled": true,
            "email": "john-doh@localhost",
            "firstName": "John",
            "lastName": "Doh",
            "credentials": [
                {
                    "type": "password",
                    "value": "password"
                }
            ],
            "realmRoles": [
                "user"
            ],
            "clientRoles": {
                "test-app": [
                    "customer-user"
                ],
                "account": [
                    "view-profile",
                    "manage-account"
                ]
            }
        },
        {
            "username": "keycloak-user@localhost",
            "enabled": true,
            "email": "keycloak-user@localhost",
            "credentials": [
                {
                    "type": "password",
                    "value": "password"
                }
            ],
            "realmRoles": [
                "user"
            ],
            "clientRoles": {
                "test-app": [
                    "customer-user"
                ],
                "account": [
                    "view-profile",
                    "manage-account"
                ]
            }
        },
        {
            "username": "topGroupUser",
            "enabled": true,
            "email": "top@redhat.com",
            "credentials": [
                {
                    "type": "password",
                    "value": "password"
                }
            ],
            "groups": [
                "/topGroup"
            ]
        },
        {
            "username": "level2GroupUser",
            "enabled": true,
            "email": "level2@redhat.com",
            "credentials": [
                {
                    "type": "password",
                    "value": "password"
                }
            ],
            "groups": [
                "/topGroup/level2group"
            ]
        },
        {
            "username": "roleRichUser",
            "enabled": true,
            "email": "rich.roles@redhat.com",
            "credentials": [
                {
                    "type": "password",
                    "value": "password"
                }
            ],
            "groups": [
                "/roleRichGroup/level2group"
            ],
            "clientRoles": {
                "test-app-scope": [
                    "test-app-allowed-by-scope",
                    "test-app-disallowed-by-scope"
                ]
            }
        },
        {
            "username": "non-duplicate-email-user",
            "enabled": true,
            "email": "non-duplicate-email-user@localhost",
            "firstName": "Brian",
            "lastName": "Cohen",
            "credentials": [
                {
                    "type": "password",
                    "value": "password"
                }
            ],
            "realmRoles": [
                "user",
                "offline_access"
            ],
            "clientRoles": {
                "test-app": [
                    "customer-user"
                ],
                "account": [
                    "view-profile",
                    "manage-account"
                ]
            }
        }
    ],
    "scopeMappings": [
        {
            "client": "third-party",
            "roles": [
                "user"
            ]
        },
        {
            "client": "test-app",
            "roles": [
                "user"
            ]
        },
        {
            "client": "test-app-scope",
            "roles": [
                "user",
                "admin"
            ]
        }
    ],
    "clients": [
        {
            "clientId": "test-app",
            "enabled": true,
            "baseUrl": "http://localhost:8180/auth/realms/master/app/auth",
            "redirectUris": [
                "http://localhost:8180/auth/realms/master/app/auth/*",
                "https://localhost:8543/auth/realms/master/app/auth/*"
            ],
            "adminUrl": "http://localhost:8180/auth/realms/master/app/admin",
            "secret": "password"
        },
        {
            "clientId": "root-url-client",
            "enabled": true,
            "rootUrl": "http://localhost:8180/foo/bar",
            "adminUrl": "http://localhost:8180/foo/bar",
            "baseUrl": "/baz",
            "redirectUris": [
                "http://localhost:8180/foo/bar/*",
                "https://localhost:8543/foo/bar/*"
            ],
            "secret": "password"
        },
        {
            "clientId": "test-app-scope",
            "enabled": true,
            "redirectUris": [
                "http://localhost:8180/auth/realms/master/app/*",
                "https://localhost:8543/auth/realms/master/app/*"
            ],
            "secret": "password",
            "fullScopeAllowed": "false"
        },
        {
            "clientId": "third-party",
            "enabled": true,
            "consentRequired": true,
            "baseUrl": "http://localhost:8180/auth/realms/master/app/auth",
            "redirectUris": [
                "http://localhost:8180/auth/realms/master/app/*",
                "https://localhost:8543/auth/realms/master/app/*"
            ],
            "secret": "password"
        },
        {
            "clientId": "test-app-authz",
            "enabled": true,
            "baseUrl": "/test-app-authz",
            "adminUrl": "/test-app-authz",
            "bearerOnly": false,
            "authorizationSettings": {
                "allowRemoteResourceManagement": true,
                "policyEnforcementMode": "ENFORCING",
                "resources": [
                    {
                        "name": "Admin Resource",
                        "uri": "/protected/admin/*",
                        "type": "http://test-app-authz/protected/admin",
                        "scopes": [
                            {
                                "name": "admin-access"
                            }
                        ]
                    },
                    {
                        "name": "Protected Resource",
                        "uri": "/*",
                        "type": "http://test-app-authz/protected/resource",
                        "scopes": [
                            {
                                "name": "resource-access"
                            }
                        ]
                    },
                    {
                        "name": "Premium Resource",
                        "uri": "/protected/premium/*",
                        "type": "urn:test-app-authz:protected:resource",
                        "scopes": [
                            {
                                "name": "premium-access"
                            }
                        ]
                    },
                    {
                        "name": "Main Page",
                        "type": "urn:test-app-authz:protected:resource",
                        "scopes": [
                            {
                                "name": "urn:test-app-authz:page:main:actionForAdmin"
                            },
                            {
                                "name": "urn:test-app-authz:page:main:actionForUser"
                            },
                            {
                                "name": "urn:test-app-authz:page:main:actionForPremiumUser"
                            }
                        ]
                    }
                ],
                "policies": [
                    {
                        "name": "Any Admin Policy",
                        "description": "Defines that adminsitrators can do something",
                        "type": "role",
                        "config": {
                            "roles": "[{\"id\":\"admin\"}]"
                        }
                    },
                    {
                        "name": "Any User Policy",
                        "description": "Defines that any user can do something",
                        "type": "role",
                        "config": {
                            "roles": "[{\"id\":\"user\"}]"
                        }
                    },
                    {
                        "name": "Only Premium User Policy",
                        "description": "Defines that only premium users can do something",
                        "type": "role",
                        "logic": "POSITIVE",
                        "config": {
                            "roles": "[{\"id\":\"customer-user-premium\"}]"
                        }
                    },
                    {
                        "name": "All Users Policy",
                        "description": "Defines that all users can do something",
                        "type": "aggregate",
                        "decisionStrategy": "AFFIRMATIVE",
                        "config": {
                            "applyPolicies": "[\"Any User Policy\",\"Any Admin Policy\",\"Only Premium User Policy\"]"
                        }
                    },
                    {
                        "name": "Premium Resource Permission",
                        "description": "A policy that defines access to premium resources",
                        "type": "resource",
                        "decisionStrategy": "UNANIMOUS",
                        "config": {
                            "resources": "[\"Premium Resource\"]",
                            "applyPolicies": "[\"Only Premium User Policy\"]"
                        }
                    },
                    {
                        "name": "Administrative Resource Permission",
                        "description": "A policy that defines access to administrative resources",
                        "type": "resource",
                        "decisionStrategy": "UNANIMOUS",
                        "config": {
                            "resources": "[\"Admin Resource\"]",
                            "applyPolicies": "[\"Any Admin Policy\"]"
                        }
                    },
                    {
                        "name": "Protected Resource Permission",
                        "description": "A policy that defines access to any protected resource",
                        "type": "resource",
                        "decisionStrategy": "AFFIRMATIVE",
                        "config": {
                            "resources": "[\"Protected Resource\"]",
                            "applyPolicies": "[\"All Users Policy\"]"
                        }
                    },
                    {
                        "name": "Action 1 on Main Page Resource Permission",
                        "description": "A policy that defines access to action 1 on the main page",
                        "type": "scope",
                        "decisionStrategy": "AFFIRMATIVE",
                        "config": {
                            "scopes": "[\"urn:test-app-authz:page:main:actionForAdmin\"]",
                            "applyPolicies": "[\"Any Admin Policy\"]"
                        }
                    },
                    {
                        "name": "Action 2 on Main Page Resource Permission",
                        "description": "A policy that defines access to action 2 on the main page",
                        "type": "scope",
                        "decisionStrategy": "AFFIRMATIVE",
                        "config": {
                            "scopes": "[\"urn:test-app-authz:page:main:actionForUser\"]",
                            "applyPolicies": "[\"Any User Policy\"]"
                        }
                    },
                    {
                        "name": "Action 3 on Main Page Resource Permission",
                        "description": "A policy that defines access to action 3 on the main page",
                        "type": "scope",
                        "decisionStrategy": "AFFIRMATIVE",
                        "config": {
                            "scopes": "[\"urn:test-app-authz:page:main:actionForPremiumUser\"]",
                            "applyPolicies": "[\"Only Premium User Policy\"]"
                        }
                    }
                ]
            },
            "redirectUris": [
                "/test-app-authz/*"
            ],
            "secret": "secret"
        },
        {
            "clientId": "named-test-app",
            "name": "My Named Test App",
            "enabled": true,
            "baseUrl": "http://localhost:8180/namedapp/base",
            "redirectUris": [
                "http://localhost:8180/namedapp/base/*",
                "https://localhost:8543/namedapp/base/*"
            ],
            "adminUrl": "http://localhost:8180/namedapp/base/admin",
            "secret": "password"
        },
        {
            "clientId": "var-named-test-app",
            "name": "Test App Named - ${client_account}",
            "enabled": true,
            "baseUrl": "http://localhost:8180/varnamedapp/base",
            "redirectUris": [
                "http://localhost:8180/varnamedapp/base/*",
                "https://localhost:8543/varnamedapp/base/*"
            ],
            "adminUrl": "http://localhost:8180/varnamedapp/base/admin",
            "secret": "password"
        },
        {
            "clientId": "direct-grant",
            "enabled": true,
            "directAccessGrantsEnabled": true,
            "secret": "password",
            "webOrigins": [
                "http://localtest.me:8180"
            ]
        }
    ],
    "roles": {
        "realm": [
            {
                "name": "user",
                "description": "Have User privileges"
            },
            {
                "name": "admin",
                "description": "Have Administrator privileges"
            },
            {
                "name": "customer-user-premium",
                "description": "Have User Premium privileges"
            },
            {
                "name": "sample-realm-role",
                "description": "Sample realm role"
            },
            {
                "name": "attribute-role",
                "description": "has attributes assigned",
                "attributes": {
                    "hello": [
                        "world",
                        "keycloak"
                    ]
                }
            },
            {
                "name": "realm-composite-role",
                "description": "Realm composite role containing client role",
                "composite": true,
                "composites": {
                    "realm": [
                        "sample-realm-role"
                    ],
                    "client": {
                        "test-app": [
                            "sample-client-role"
                        ],
                        "account": [
                            "view-profile"
                        ]
                    }
                }
            }
        ],
        "client": {
            "test-app": [
                {
                    "name": "customer-user",
                    "description": "Have Customer User privileges"
                },
                {
                    "name": "customer-admin",
                    "description": "Have Customer Admin privileges"
                },
                {
                    "name": "sample-client-role",
                    "description": "Sample client role"
                },
                {
                    "name": "customer-admin-composite-role",
                    "description": "Have Customer Admin privileges via composite role",
                    "composite": true,
                    "composites": {
                        "realm": [
                            "customer-user-premium"
                        ],
                        "client": {
                            "test-app": [
                                "customer-admin"
                            ]
                        }
                    }
                }
            ],
            "test-app-scope": [
                {
                    "name": "test-app-allowed-by-scope",
                    "description": "Role allowed by scope in test-app-scope"
                },
                {
                    "name": "test-app-disallowed-by-scope",
                    "description": "Role disallowed by scope in test-app-scope"
                }
            ]
        }
    },
    "groups": [
        {
            "name": "topGroup",
            "attributes": {
                "topAttribute": [
                    "true"
                ]
            },
            "realmRoles": [
                "user"
            ],
            "subGroups": [
                {
                    "name": "level2group",
                    "realmRoles": [
                        "admin"
                    ],
                    "clientRoles": {
                        "test-app": [
                            "customer-user"
                        ]
                    },
                    "attributes": {
                        "level2Attribute": [
                            "true"
                        ]
                    }
                },
                {
                    "name": "level2group2",
                    "realmRoles": [
                        "admin"
                    ],
                    "clientRoles": {
                        "test-app": [
                            "customer-user"
                        ]
                    },
                    "attributes": {
                        "level2Attribute": [
                            "true"
                        ]
                    }
                }
            ]
        },
        {
            "name": "roleRichGroup",
            "attributes": {
                "topAttribute": [
                    "true"
                ]
            },
            "realmRoles": [
                "user",
                "realm-composite-role"
            ],
            "clientRoles": {
                "account": [
                    "manage-account"
                ]
            },
            "subGroups": [
                {
                    "name": "level2group",
                    "realmRoles": [
                        "admin"
                    ],
                    "clientRoles": {
                        "test-app": [
                            "customer-user",
                            "customer-admin-composite-role"
                        ]
                    },
                    "attributes": {
                        "level2Attribute": [
                            "true"
                        ]
                    }
                },
                {
                    "name": "level2group2",
                    "realmRoles": [
                        "admin"
                    ],
                    "clientRoles": {
                        "test-app": [
                            "customer-user"
                        ]
                    },
                    "attributes": {
                        "level2Attribute": [
                            "true"
                        ]
                    }
                }
            ]
        }
    ],
    "clientScopeMappings": {
        "test-app": [
            {
                "client": "third-party",
                "roles": [
                    "customer-user"
                ]
            },
            {
                "client": "test-app-scope",
                "roles": [
                    "customer-admin-composite-role"
                ]
            }
        ],
        "test-app-scope": [
            {
                "client": "test-app-scope",
                "roles": [
                    "test-app-allowed-by-scope"
                ]
            }
        ]
    },
    "authenticationFlows": [
        {
            "alias": "browser-webauthn",
            "description": "browser based authentication",
            "providerId": "basic-flow",
            "topLevel": true,
            "builtIn": false,
            "authenticationExecutions": [
                {
                    "authenticator": "auth-cookie",
                    "requirement": "ALTERNATIVE",
                    "priority": 10,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticator": "auth-spnego",
                    "requirement": "DISABLED",
                    "priority": 20,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticator": "identity-provider-redirector",
                    "requirement": "DISABLED",
                    "priority": 25,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "requirement": "ALTERNATIVE",
                    "priority": 30,
                    "flowAlias": "browser-webauthn-forms",
                    "userSetupAllowed": false,
                    "autheticatorFlow": true
                }
            ]
        },
        {
            "alias": "browser-webauthn-forms",
            "description": "Username, password, otp and other auth forms.",
            "providerId": "basic-flow",
            "topLevel": false,
            "builtIn": false,
            "authenticationExecutions": [
                {
                    "authenticator": "auth-username-password-form",
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticator": "auth-otp-form",
                    "requirement": "DISABLED",
                    "priority": 20,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticator": "webauthn-authenticator",
                    "requirement": "REQUIRED",
                    "priority": 21,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                }
            ]
        },
        {
            "alias": "browser-webauthn-passwordless",
            "description": "browser based authentication",
            "providerId": "basic-flow",
            "topLevel": true,
            "builtIn": false,
            "authenticationExecutions": [
                {
                    "authenticator": "auth-cookie",
                    "requirement": "ALTERNATIVE",
                    "priority": 10,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "requirement": "ALTERNATIVE",
                    "priority": 30,
                    "flowAlias": "browser-webauthn-passwordless-forms",
                    "userSetupAllowed": false,
                    "autheticatorFlow": true
                }
            ]
        },
        {
            "alias": "browser-webauthn-passwordless-forms",
            "description": "Username, password, otp and other auth forms.",
            "providerId": "basic-flow",
            "topLevel": false,
            "builtIn": false,
            "authenticationExecutions": [
                {
                    "authenticator": "auth-username-password-form",
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticator": "webauthn-authenticator",
                    "requirement": "REQUIRED",
                    "priority": 20,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticator": "webauthn-authenticator-passwordless",
                    "requirement": "REQUIRED",
                    "priority": 30,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                }
            ]
        },
        {
            "alias": "Handle Existing Account",
            "description": "Handle what to do if there is existing account with same email/username like authenticated identity provider",
            "providerId": "basic-flow",
            "topLevel": false,
            "builtIn": true,
            "authenticationExecutions": [
                {
                    "authenticator": "idp-confirm-link",
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticator": "idp-email-verification",
                    "requirement": "ALTERNATIVE",
                    "priority": 20,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "requirement": "ALTERNATIVE",
                    "priority": 30,
                    "flowAlias": "Verify Existing Account by Re-authentication",
                    "userSetupAllowed": false,
                    "autheticatorFlow": true
                }
            ]
        },
        {
            "alias": "Verify Existing Account by Re-authentication",
            "description": "Reauthentication of existing account",
            "providerId": "basic-flow",
            "topLevel": false,
            "builtIn": true,
            "authenticationExecutions": [
                {
                    "authenticator": "idp-username-password-form",
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticator": "auth-otp-form",
                    "requirement": "OPTIONAL",
                    "priority": 20,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                }
            ]
        },
        {
            "alias": "browser",
            "description": "browser based authentication",
            "providerId": "basic-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
                {
                    "authenticator": "auth-cookie",
                    "requirement": "ALTERNATIVE",
                    "priority": 10,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticator": "auth-spnego",
                    "requirement": "DISABLED",
                    "priority": 20,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticator": "identity-provider-redirector",
                    "requirement": "ALTERNATIVE",
                    "priority": 25,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "requirement": "ALTERNATIVE",
                    "priority": 30,
                    "flowAlias": "forms",
                    "userSetupAllowed": false,
                    "autheticatorFlow": true
                }
            ]
        },
        {
            "alias": "clients",
            "description": "Base authentication for clients",
            "providerId": "client-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
                {
                    "authenticator": "client-secret",
                    "requirement": "ALTERNATIVE",
                    "priority": 10,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticator": "client-jwt",
                    "requirement": "ALTERNATIVE",
                    "priority": 20,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticator": "client-secret-jwt",
                    "requirement": "ALTERNATIVE",
                    "priority": 30,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticator": "client-x509",
                    "requirement": "ALTERNATIVE",
                    "priority": 40,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                }
            ]
        },
        {
            "alias": "direct grant",
            "description": "OpenID Connect Resource Owner Grant",
            "providerId": "basic-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
                {
                    "authenticator": "direct-grant-validate-username",
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticator": "direct-grant-validate-password",
                    "requirement": "REQUIRED",
                    "priority": 20,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticator": "direct-grant-validate-otp",
                    "requirement": "OPTIONAL",
                    "priority": 30,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                }
            ]
        },
        {
            "alias": "docker auth",
            "description": "Used by Docker clients to authenticate against the IDP",
            "providerId": "basic-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
                {
                    "authenticator": "docker-http-basic-authenticator",
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                }
            ]
        },
        {
            "alias": "first broker login",
            "description": "Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account",
            "providerId": "basic-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
                {
                    "authenticatorConfig": "review profile config",
                    "authenticator": "idp-review-profile",
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticatorConfig": "create unique user config",
                    "authenticator": "idp-create-user-if-unique",
                    "requirement": "ALTERNATIVE",
                    "priority": 20,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "requirement": "ALTERNATIVE",
                    "priority": 30,
                    "flowAlias": "Handle Existing Account",
                    "userSetupAllowed": false,
                    "autheticatorFlow": true
                }
            ]
        },
        {
            "alias": "forms",
            "description": "Username, password, otp and other auth forms.",
            "providerId": "basic-flow",
            "topLevel": false,
            "builtIn": true,
            "authenticationExecutions": [
                {
                    "authenticator": "auth-username-password-form",
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticator": "auth-otp-form",
                    "requirement": "OPTIONAL",
                    "priority": 20,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                }
            ]
        },
        {
            "alias": "http challenge",
            "description": "An authentication flow based on challenge-response HTTP Authentication Schemes",
            "providerId": "basic-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
                {
                    "authenticator": "no-cookie-redirect",
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticator": "basic-auth",
                    "requirement": "REQUIRED",
                    "priority": 20,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticator": "basic-auth-otp",
                    "requirement": "DISABLED",
                    "priority": 30,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticator": "auth-spnego",
                    "requirement": "DISABLED",
                    "priority": 40,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                }
            ]
        },
        {
            "alias": "registration",
            "description": "registration flow",
            "providerId": "basic-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
                {
                    "authenticator": "registration-page-form",
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "flowAlias": "registration form",
                    "userSetupAllowed": false,
                    "autheticatorFlow": true
                }
            ]
        },
        {
            "alias": "registration form",
            "description": "registration form",
            "providerId": "form-flow",
            "topLevel": false,
            "builtIn": true,
            "authenticationExecutions": [
                {
                    "authenticator": "registration-user-creation",
                    "requirement": "REQUIRED",
                    "priority": 20,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticator": "registration-profile-action",
                    "requirement": "REQUIRED",
                    "priority": 40,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticator": "registration-password-action",
                    "requirement": "REQUIRED",
                    "priority": 50,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticator": "registration-recaptcha-action",
                    "requirement": "DISABLED",
                    "priority": 60,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                }
            ]
        },
        {
            "alias": "reset credentials",
            "description": "Reset credentials for a user if they forgot their password or something",
            "providerId": "basic-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
                {
                    "authenticator": "reset-credentials-choose-user",
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticator": "reset-credential-email",
                    "requirement": "REQUIRED",
                    "priority": 20,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticator": "reset-password",
                    "requirement": "REQUIRED",
                    "priority": 30,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                },
                {
                    "authenticator": "reset-otp",
                    "requirement": "OPTIONAL",
                    "priority": 40,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                }
            ]
        },
        {
            "alias": "saml ecp",
            "description": "SAML ECP Profile Authentication Flow",
            "providerId": "basic-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
                {
                    "authenticator": "http-basic-authenticator",
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "userSetupAllowed": false,
                    "autheticatorFlow": false
                }
            ]
        }
    ],
    "authenticatorConfig": [
        {
            "alias": "create unique user config",
            "config": {
                "require.password.update.after.registration": "false"
            }
        },
        {
            "alias": "review profile config",
            "config": {
                "update.profile.on.first.login": "missing"
            }
        }
    ],
    "requiredActions": [
        {
            "alias": "CONFIGURE_TOTP",
            "name": "Configure OTP",
            "providerId": "CONFIGURE_TOTP",
            "enabled": true,
            "defaultAction": false,
            "priority": 10,
            "config": {}
        },
        {
            "alias": "terms_and_conditions",
            "name": "Terms and Conditions",
            "providerId": "terms_and_conditions",
            "enabled": false,
            "defaultAction": false,
            "priority": 20,
            "config": {}
        },
        {
            "alias": "UPDATE_PASSWORD",
            "name": "Update Password",
            "providerId": "UPDATE_PASSWORD",
            "enabled": true,
            "defaultAction": false,
            "priority": 30,
            "config": {}
        },
        {
            "alias": "UPDATE_PROFILE",
            "name": "Update Profile",
            "providerId": "UPDATE_PROFILE",
            "enabled": true,
            "defaultAction": false,
            "priority": 40,
            "config": {}
        },
        {
            "alias": "VERIFY_EMAIL",
            "name": "Verify Email",
            "providerId": "VERIFY_EMAIL",
            "enabled": true,
            "defaultAction": false,
            "priority": 50,
            "config": {}
        },
        {
            "alias": "webauthn-register",
            "name": "Webauthn Register",
            "providerId": "webauthn-register",
            "enabled": true,
            "defaultAction": true,
            "priority": 51,
            "config": {}
        },
        {
            "alias": "webauthn-register-passwordless",
            "name": "Webauthn Register Passwordless",
            "providerId": "webauthn-register-passwordless",
            "enabled": true,
            "defaultAction": false,
            "priority": 52,
            "config": {}
        }
    ],
    "browserFlow": "browser-webauthn",
    "internationalizationEnabled": true,
    "supportedLocales": [
        "en",
        "de"
    ],
    "defaultLocale": "en",
    "eventsListeners": [
        "jboss-logging",
        "event-queue"
    ]
}